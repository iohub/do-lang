

keyword = _{
    "fn" | "let" | "if" | "return" | "else" | "for" |
    "false" | "true" | "while" | "loop" | "for" |
    "break" | "continue" | "enum" | "impl" | "use" |
    "struct" | "pub" | "mut" | "int" | "float" | "str"
}

basic_val = @{
    "int" | "float" | "str"
}

WHITESPACE = _{ (" ") | ("\t") | ("\u{000C}") | ("\r") | ("\n") }

// token define
whitespace = _{ " " | "\t" | "\r" | "\n" }
alpha = _{ 'a'..'z' | 'A'..'Z' | "_" }
alphanumeric = _{ alpha | '0'..'9' }
nonzero = _{ '1'..'9' }
digit = _{ '0'..'9' }
integer = @{ "0" | (nonzero ~ digit*) }
float = @{ integer+ ~ "." ~ integer+ }
identifier = @{ (!keyword) ~ (alpha) ~ (alpha | digit)* }
bool = @{ "true" | "false" }
double_quoted_string = @{ "\"" ~ (!("\"") ~ ANY)* ~ "\"" }
single_quoted_string = @{ "\'" ~ (!("\'") ~ ANY)* ~ "\'" }
backquoted_quoted_string = @{ "`" ~ (!("`") ~ ANY)* ~ "`" }

str = @{
    double_quoted_string |
    single_quoted_string |
    backquoted_quoted_string
}

// operator
op_or = { "||" }
op_and = { "&&" }
op_eq = { "==" }
op_ne = { "!=" }
op_le = { "<=" }
op_ge = { ">=" }
op_gt = { "<" }
op_lt = { ">" }
op_not = { "!" }
op_plus = { "+" }
op_modulo = { "%" }


// top level of program module
_module = _{ SOI ~ decl_func* ~ statement* ~ EOI }

// grammar define
fn_decl_arg = { identifier ~ ":" ~ basic_val }
fun_decl_args = { fn_decl_arg ~ ("," ~ fn_decl_arg)*  }
func_decl_type = { "->" ~  basic_val }
decl_func = { "fn" ~ identifier ~  "(" ~ fun_decl_args ~ ")" ~ func_decl_type? ~ block }
block = { ("{") ~ statement* ~ ("}") }

infix = { (identifier | values | fn_call) ~ op_infix ~ (identifier | values| fn_call) }
prefix = { op_not ~ (identifier | fn_call) }
arg = { identifier | values }
args = { arg ~ ( "," ~  arg)* }
fn_call = { identifier ~ "(" ~ args? ~ ")" }

expr = { 
    infix |
    prefix |
    fn_call
}

statement = { 
    let_decl |
    let_decl_init |
    assign_stmt |
    while_stmt |
    if_stmt |
    ( expr ~ ";" )
}

var_decl = { let_decl_init | let_decl }
let_decl = { "let" ~ identifier ~ ";" }
let_decl_init = { "let" ~ identifier ~  "=" ~ (identifier | expr | values) ~ ";" }
assign_stmt = { identifier ~ ("=") ~ (fn_call) ~ (";") }

values = { 
    integer |
    float |
    str
}

while_stmt = { "while" ~ expr ~ block }
if_stmt = { "if" ~ expr ~ block ~ ("else" ~ block)* }
comment = _{ "//" ~ (!("\r" | "\n") ~ ANY)* ~ ("\n" | "\r\n" | "\r") }

op_infix = _{
    op_or |
    op_and |
    op_eq |
    op_ne |
    op_le |
    op_ge |
    op_gt |
    op_lt | 
    op_plus
}


