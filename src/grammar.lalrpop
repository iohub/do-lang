
use std::str::FromStr;
use crate::ast::*;

grammar;

pub Module: Vec<AstNode> = {
    <v: Statement*> => v
}

pub Statement: AstNode = {
    <expr: Expr> ";" => expr,
    <fdecl: FnDecl> => fdecl,
    <ifstmt: IfStmt> => ifstmt,
    <AssignStmt> ";" => <>,
    <WhileStmt> => <>,
    <LetStmt> => <>,
    <ReturnExpr> ";" => <>,
}

Expr: AstNode = {
    BinaryLogicExpr => <>,
    // bool-fn
    FnCall => <>,
    // bool-var
    Ident => <>,
}

ValExpr: AstNode = {
    MathStmt => <>,
    FnCall => <>,
    Ident => <>,
    Float => <>,
    Int => <>,
    Str => <>,
}

ReturnExpr: AstNode = {
    <s:@L> "return" <val: ValExpr> <e:@L> => {
        AstNode::ReturnStmt(Box::new(val), AstType::Unknown)
    }
}

IfStmt: AstNode = {
    <s:@L> "if" <cond: Expr> <tblock: Stmtblock> <e:@L> => {
        AstNode::IfStmt(Box::new(cond), tblock, Vec::new())
    },
    <s:@L> "if" <cond: Expr> <tblock: Stmtblock> "else" <fblock: Stmtblock> <e:@L> => {
        AstNode::IfStmt(Box::new(cond), tblock, fblock)
    }
}

LetStmt: AstNode = {
    <s:@L> "let" <var: Ident> ";" <e:@L> => {
        AstNode::VarDecl(Box::new(var), Box::new(AstNode::Nil), AstType::Unknown)
    },
    <s:@L> "let" <var: Ident> "=" <val: ValObj> ";" <e:@L> => {
        AstNode::VarDecl(Box::new(var), Box::new(val), AstType::Unknown)
    }
}

WhileStmt: AstNode = {
    <s:@L> "while" <cond: Expr> <tblock: Stmtblock> <e:@L> => {
        AstNode::WhileStmt(Box::new(cond), tblock)
    },
}

AssignStmt: AstNode = {
    <s:@L> <var1: Ident> "=" <var2: ValExpr> <e:@L> => {
        AstNode::Assignment(Box::new(var1), Box::new(var2))
    }
}

BinaryLogicExpr: AstNode = {
    <s:@L> <obj1:ValObj> <op:BinLogicOp> <obj2:ValObj> <e:@L> => {
        AstNode::BinaryOp(Box::new(obj1), op, Box::new(obj2), AstType::Unknown)
    }
}

ValObj: AstNode = {
    Ident => <>,
    Int => <>,
    Float => <>,
    Str => <>,
    FnCall => <>,
    MathStmt => <>,
}

// + - * /
NumOpObj: AstNode = {
    Ident => <>,
    Int => <>,
    Float => <>,
    FnCall => <>,
}

MathStmt: AstNode = {
    <s:@L> <obj1: NumOpObj> <op: MathOp> <obj2: NumOpObj> <e:@L> => {
        AstNode::BinaryOp(Box::new(obj1), op, Box::new(obj2), AstType::Unknown)
    },
    <s:@L> <obj1: MathStmt> <op: MathOp> <obj2: NumOpObj> <e:@L> => {
        AstNode::BinaryOp(Box::new(obj1), op, Box::new(obj2), AstType::Unknown)
    }
}

FnCall: AstNode = {
     <s:@L> <fname:Ident> <args:FnArgs> <e:@L> => AstNode::FnCall(Box::new(fname), args)
}

Stmtblock: Vec<AstNode> = {
   "{" <v:(<Statement>)*> <e:(Expr)?> "}" => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

FnArgs: Vec<AstNode> = {
    "(" <args:Comma<ValObj>> ")" => args
}

Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

FnDecl: AstNode = {
    <s:@L> <p:"pub"?> "fn" <name: RawIdent> <args: FnDeclArgs> "->" <rtype: RawIdent> <block: Stmtblock> <e:@L> => {
        let typ = typeof_ident(&rtype);
        AstNode::FnDecl(Box::new(AstNode::Ident(name, typ)), args, block)
    },
    <s:@L> <p:"pub"?> "fn" <name: RawIdent> <args: FnDeclArgs> <block: Stmtblock> <e:@L> => {
        AstNode::FnDecl(Box::new(AstNode::Ident(name, AstType::Int)), args, block)
    }
}

RawIdent: String = {
    <v:r"[A-Za-z_][A-Za-z_0-9]*"> => v.to_string()
}

FnDeclArgs: Vec<AstNode> = {
    "(" <v:(<ColonArg> ",")*> <e:ColonArg?> ")" => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}

ColonArg: AstNode = {
    <n: RawIdent> ":" <t: RawIdent> => {
        let typ = typeof_ident(&t);
        AstNode::Ident(n, typ)
    }
}

Ident: AstNode = {
    <v:r"[A-Za-z_][A-Za-z_0-9]*"> => {
        let typ = typeof_ident(&v.to_string());
        AstNode::Ident(v.to_string(), typ)
    }
}

BinLogicOp: Operator = {
    CompareOp => <>,
    LogicOp => <>,
}

CompareOp: Operator = {
     "==" => Operator::OpEq,
     "!=" => Operator::OpNe,
     "<=" => Operator::OpLe,
     ">=" => Operator::OpGe,
     "<" => Operator::OpLt,
     ">" => Operator::OpGt,
}

LogicOp: Operator = {
    "||" => Operator::OpOr,
    "&&" => Operator::OpAnd,
}

MathOp: Operator = {
     "+" => Operator::OpPlus,
     "-" => Operator::OpSub,
     "*" => Operator::OpMul,
     "/" => Operator::OpDiv,
}

Int: AstNode = {
    <s:@L> <i:r"-?[0-9]+"> <e:@L> => AstNode::Int(i32::from_str(i).unwrap())
}

Float: AstNode = {
    <s:@L> <f:r"-?[0-9]+\.+[0-9]*"> <e:@L> => {
        AstNode::Float(f32::from_str(f).unwrap())
    }
}

Str: AstNode = {
    <x:r#""(([^\\"]|\\.)*)""#> => {
        AstNode::Str(x[1..(x.len() - 1)].to_string())
    }
}
